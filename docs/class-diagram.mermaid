classDiagram
    class User {
        +Long id
        +String email
        +String password
        +String name
        +PackUsers.Team team
        +Role role
        +List~Projects~ projects
        +changePassword(String newPassword)
        +updateProfile(PackUsers.UserDTO userDetails)
        +assignToProject(Projects project)
        +removeFromProject(Projects project)
        +hasRole(Role role)
    }

    class PackUsers.Team {
        +Long id
        +String name
        +User supervisor
        +List~User~ members
        +addMember(User user)
        +removeMember(User user)
        +getSupervisor()
        +listMembers()
    }

    class Projects {
        +Long id
        +String name
        +String description
        +ProjectStatus status
        +User projectLead
        +List~User~ assignedUsers
        +LocalDate dueDate
        +ProjectImportance importance
        +List~Projects.Task~ tasks
        +createTask(Projects.TaskDTO taskDetails)
        +assignUsers(List~User~ users)
        +closeProject()
        +updateProjectDetails(Projects.ProjectDTO projectDetails)
        +addProjectDocument(Projects.Document document)
    }

    class Projects.Task {
        +Long id
        +String name
        +String description
        +TaskStatus status
        +User assignee
        +User supervisor
        +LocalDate dueDate
        +TaskImportance importance
        +List~Projects.TaskStep~ steps
        +submitTask(String completionNote)
        +addStep(Projects.TaskStep step)
        +approveTask(boolean isApproved, String feedback)
        +updateTaskDetails(Projects.TaskDTO taskDetails)
    }

    class Projects.TaskStep {
        +Long id
        +String description
        +boolean completed
        +LocalDateTime completedAt
        +markCompleted(User completedBy)
        +updateDescription(String newDescription)
    }

    class Projects.Schedule {
        +Long id
        +Projects project
        +List~Projects.ScheduleEvent~ events
        +addEvent(Projects.ScheduleEvent event)
        +removeEvent(Projects.ScheduleEvent event)
        +getUpcomingEvents()
        +generateProjectTimeline()
    }

    class Projects.ScheduleEvent {
        +Long id
        +String description
        +LocalDateTime dateTime
        +EventType type
        +User createdBy
        +updateEventDetails(Projects.ScheduleEventDTO eventDetails)
    }

    class Projects.Document {
        +Long id
        +String name
        +String fileUrl
        +User uploadedBy
        +LocalDateTime uploadedAt
        +downloadDocument()
    }

    class Role {
        <<enumeration>>
        EMPLOYEE
        PROJECT_CREATOR
        PROJECT_LEAD
        DIRECT_SUPERVISOR
        SUPER_USER
        ADMIN
    }

    class ProjectStatus {
        <<enumeration>>
        PENDING
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }

    class TaskStatus {
        <<enumeration>>
        TODO
        IN_PROGRESS
        UNDER_REVIEW
        COMPLETED
        REJECTED
    }

    class TaskImportance {
        <<enumeration>>
        LOW
        MEDIUM
        HIGH
        CRITICAL
    }

    class ProjectImportance {
        <<enumeration>>
        LOW
        MEDIUM
        HIGH
        STRATEGIC
    }

    User "1" -- "1" PackUsers.Team : belongs to
    User "1" -- "*" Projects : can create/participate
    Projects "1" -- "*" Projects.Task : contains
    Projects.Task "1" -- "*" Projects.TaskStep : divided into
    Projects "1" -- "1" Projects.Schedule : has
    Projects.Schedule "1" -- "*" Projects.ScheduleEvent : includes
    Projects "1" -- "*" Projects.Document : has
    User ..> Role : has
    Projects ..> ProjectStatus : has
    Projects.Task ..> TaskStatus : has
    Projects.Task ..> TaskImportance : has
    Projects ..> ProjectImportance : has